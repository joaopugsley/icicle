fl.outputPanel.clear();
fl.outputPanel.trace('[FLAWATCH] Refreshing...');
var file_name = 'file2';
var file_content = 'class com.clubpenguin.puffleavatar.PuffleAvatarController\n{\n   var _SHELL;\n   var _ENGINE;\n   var _puffleAvatarMap;\n   var _LOGGER;\n   var _roomMovieClip;\n   function PuffleAvatarController(shellMC, engineMC)\n   {\n      this._SHELL = shellMC;\n      this._ENGINE = engineMC\n      this._puffleAvatarMap = new Object();\n      this._SHELL.addListener(this._SHELL.REMOVE_PLAYER,com.clubpenguin.util.Delegate.create(this,this.onRemovePlayer));\n      _LOGGER = net.cpavalanche.loggers.DefaultLoggerFactory.createLogger("PuffleAvatarController");\n   }\n   function attachPuffle(playerObject)\n   {      \n      if(playerObject.attachedPuffle != undefined && playerObject.attachedPuffle != null)\n      {\n         var puffleData = playerObject.attachedPuffle;\n         var puffleModel = _SHELL.getPath("clothing_sprites") + (750 + puffleData.typeID) + ".swf";\n         var puffleWorldObject;\n         if(this._puffleAvatarMap[puffleData.id] == undefined || this._puffleAvatarMap[puffleData.id] == null)\n         {\n            puffleWorldObject = new com.clubpenguin.puffleavatar.PuffleAvatar(puffleData,this._SHELL, this._ENGINE);\n            this._puffleAvatarMap[puffleData.id] = puffleWorldObject;\n            flash.external.ExternalInterface.call("console.log", _puffleAvatarMap.length)\n         }\n         else\n         {\n            puffleWorldObject = this._puffleAvatarMap[puffleData.id];\n         }\n         puffleWorldObject.loadPuffleAsset(puffleModel,playerObject.player_id);\n      }\n   }\n   function update()\n   {\n      for(var _loc2_ in this._puffleAvatarMap)\n      {\n         this._puffleAvatarMap[_loc2_].update();\n      }\n   }\n   function detachPuffle(puffleId)\n   {\n      this.destroyPuffleAvatar(puffleId);\n   }\n   function getPuffleClip(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         return this._puffleAvatarMap[puffleId].getPuffleClip();\n      }\n      return null;\n   }\n   function getPuffleAvatar(puffleId)\n   {\n      return this._puffleAvatarMap[puffleId];\n   }\n   function displayPuffleWidget(puffleId, widgetType, puffleItemId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].displayPuffleStatsWidget(widgetType,puffleItemId);\n      }\n   }\n   function hidePuffle(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].hide();\n      }\n   }\n   function showPuffle(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].show();\n      }\n   }\n   function hideHat(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].hideHat();\n      }\n   }\n   function showHat(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].showHat();\n      }\n   }\n   function loadHat(puffleId, puffleHatVO)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].loadPuffleHat(puffleHatVO);\n      }\n   }\n   function unloadHat(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].unloadPuffleHat();\n      }\n   }\n   function isPuffleVisible(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         return this._puffleAvatarMap[puffleId].isPuffleVisible();\n      }\n      return false;\n   }\n   function getPuffleCanMove(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         return this._puffleAvatarMap[puffleId].puffleCanMove;\n      }\n      return false;\n   }\n   function updatePuffleFrame(puffleId, frameNumber)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].updatePuffleFrame(frameNumber);\n      }\n   }\n   function getPuffleFrame(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         return this._puffleAvatarMap[puffleId].getPuffleFrame();\n      }\n      return null;\n   }\n   function setFrameUpdateEnabled(puffleId, enable)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].setFrameUpdateEnabled(enable);\n      }\n   }\n   function addPuffleEffect(puffleId, effect)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].loadPuffleEffect(effect);\n      }\n   }\n   function onRemovePlayer(playerId)\n   {\n      var _loc3_ = this._SHELL.getPlayerObjectById(playerId);\n      if(_loc3_.attachedPuffle != undefined && _loc3_.attachedPuffle != null)\n      {\n         this.destroyPuffleAvatar(_loc3_.attachedPuffle.id);\n      }\n   }\n   function puffleAvatarExists(puffleId)\n   {\n      return this._puffleAvatarMap[puffleId] != undefined && this._puffleAvatarMap[puffleId] != null;\n   }\n   function destroyPuffleAvatar(puffleId)\n   {\n      if(this.puffleAvatarExists(puffleId))\n      {\n         this._puffleAvatarMap[puffleId].destroy();\n         this._puffleAvatarMap[puffleId] = null;\n      }\n   }\n}\n';
var doc=fl.getDocumentDOM();
var tl=doc.getTimeline();
tl.layers[0].frames[0].actionScript=file_content;
fl.openDocument('file:///' + file_name);
fl.saveDocument(fl.getDocumentDOM(), 'file:///' + file_name);
var now = new Date();
fl.outputPanel.clear();
fl.outputPanel.trace('[FLAWATCH] Refreshed! ' + now);